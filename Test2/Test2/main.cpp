#include <iostream>
#include <fstream>
#include <regex>
#include "Point.h"
#include "CheckingInputFile.h"
#include "CheckingUsersPoint.h"

using namespace std;


int main()
{
	if (checkingInputFile())//если входной файл првильный
	{
		vector<Point> myVector;//вектор хранящий координаты вершин(Point) четырехугольника
		myVector.reserve(stringsQuantityMustBeInInput);

		ifstream fin("input.txt");//объект для считывания строк из файла 
		regex rxStringForApex("-?[0-9]+(\\.[0-9]{1,8})?");
		//регулярное выржение для выделения из строки файла каждой из координат x и y вершины выпуклого 4-угольника
		smatch result;//строка в которую
		string buffer;

		for (int i = 0; i < stringsQuantityMustBeInInput; i++)//В данном цикле ситывается строка из входного файла
		{													  //для дальнейшего ее перевода в тип Point во внутреннем цикле
			fin >> buffer; // считали первое слово из файла
			Point apex;//создали объект вершины
			for (int j = 0; j < coordinatesQuantity; j++)
			{
				regex_search(buffer, result, rxStringForApex);//функция ищет первое слово по регулярному выражению rxStringForApex
															  //в строке buffer и записывает значение в result[0]
				if (!j)
					apex.SetX(stod(result[0]));//первое найденное значение записывается в х-координату раннее созданного объекта вершины
				else
					apex.SetY(stod(result[0]));//второе найденное значение записывается в y-координату раннее созданного объекта вершины
				buffer = result.suffix().str();//от строки buffer как бы отрезается все что идет до части совпадающей с result[0]
											   //включительно result[0]
											   //Таким образом в данном цикле каждая строка из входного файла переводится в объект типа Point
			}
			myVector.push_back(apex);//после формирования координаты вершины, она записывается в вектор
		}

		fin.close();//закрываем водной файл, так как все значения уже есть в векторе myVector

					//проверка корректности rввода координат точки, которая проверяется на то лежит ли она внутри выпуклого четырехугольника и т.д.
					//================================================================================================================================================ 

		Point myPoint;//создаем переменную Point, которую в дальнейшем будем проверять на то лежит ли она внутри выпуклого четырехугольника и т.д. 
					  //по заданию
		string temp;//создаем строку, в которую  пользователем будут введенные координаты (как x так и y) для вышеуказанной точки myPoint

		regex rxStringInInput("(((0|(-?[1-9][0-9]{0,7}))(\\.[0-9]{0,8})?)|(-0\\.[0-9]{0,8}))");
		//регулярное выржение для выделения проверки входных значений для координат x и y

		bool checkX = false, checkY = false;//флаг проверки каждой из координат (если true, то проверка прошла верно, если false - то неверно)
											//до начала проверки устанавливаем обе координаты в false
		while (!checkX || !checkY)//цикл выполняется до тех пор пока checkX и checkY не станут равными true
		{
			if (checkX == false)
			{
				cout << "Enter X value for a point: ";
				cin >> temp;//вводим в строку значение для кординаты-x проверяемой точки

				if (regex_match(temp, rxStringInInput))//если строка удовлетворяет регулярное выржение
													   //для выделения проверки входных значений для координат x и y
				{
					myPoint.SetX(stod(temp));//переводим строку temp в double
					checkX = true;			 //и устанавливаем checkX в true
				}
				else                         //в противном случае 
				{
					cout << "Invalid value\n" << temp << endl;//выводим на экран сообщение, о неправильном вводе значения для координаты
					continue;								  //и повторяем цикл заново
				}
			} // тоже самое проделываем и  для y-координаты
			if (checkY == false)
			{
				cout << "Enter Y value for a point: ";
				cin >> temp;//вводим в строку значение для кординаты-y проверяемой точки

				if (regex_match(temp, rxStringInInput))
				{
					myPoint.SetY(stod(temp));
					checkY = true;
				}
				else
				{
					cout << "Invalid value\n";
					continue;
				}
			}
		}

		checkingUsersPoint(myPoint, myVector);//после выполнения всех проверок вызывается собственно  функция  
											  //которая проверяет лежит ли заданная пользователем точка внутри выпуклого четырехугольника и т.д.
											  //передаем в нее саму проверяемую точку myPoint и ссылка вектор myVector - сожержащий координаты вершин 
											  //выпуклого 4-х угольника
	}
	return 0;
}

